/*
This class is the visual representation of the sequencer.
it works by drawing a every beat in 16 intervals to indicate to the user that there is a beginning and end to the sequencer.
I was inspired by one of the examples provided by Minim that allows you to create an oscilloscope. I thought it would be cool to not only visual represent
the motion of the sequencer but also the motion of the samples being played.



*/

//import minim libaries
import ddf.minim.analysis.*;
import ddf.minim.*;


class Movement{
  //object variables, moveLine is set to 37 so it has a starting position
  //counter is used 
  
  float moveLine =37;


  //default constructor so we can create an object of Movement type
  Movement(){
 
 
  }

  //display function which draws the oscilloscope line, advances the position of the line based on the Beat int which is generated by the Tick class
  //beat steps through the a 16 note 120 bpm or 60 bpm bar.
  void display()
  {    
     moveLine =37 + beat*45;

  //this section of the code was adapted by Minim's example for making an oscilloscope
  //It takes the buffersize from Minim's output, maps it to a float x1,x2.
  //the line is then drawn from the x1,x2 float variables and using Minim's output get and mix function to get the buffer position from both left/right channels  
  //it then substracts  it from the Moveline positiont, his is what creates the oscilloscope effect
  for( int i = 0; i < out.bufferSize() - 1; i++ )
    {

      float x1  =  map( i, 0, out.bufferSize(), 0, width );
      float x2  =  map( i+1, 0, out.bufferSize(), 0, width );
    
      
      line( x1, moveLine - out.mix.get(i)*50, x2, moveLine - out.mix.get(i+1)*50);
      stroke(0);
    }  
  
  
  }





}
